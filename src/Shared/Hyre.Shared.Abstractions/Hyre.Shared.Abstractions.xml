<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hyre.Shared.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Hyre.Shared.Abstractions.Exceptions.DomainException">
            <summary>
              Base exception that is used when a domain rule is violated.
            </summary>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Exceptions.DomainException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Hyre.Shared.Abstractions.Exceptions.DomainException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Exceptions.NotFoundException">
            <summary>
              Base exception that is used when a resource is not found.
            </summary>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Exceptions.NotFoundException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Hyre.Shared.Abstractions.Exceptions.NotFoundException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Kernel.Entities.EntityBase`1">
            <summary>
              This class is the base class for all entities in the system.
            </summary>
            <inheritdoc cref="T:Hyre.Shared.Abstractions.Kernel.Entities.IEntityBase" />
        </member>
        <member name="M:Hyre.Shared.Abstractions.Kernel.Entities.EntityBase`1.#ctor(`0)">
            <summary>
              Initializes a new instance of the <see cref="T:Hyre.Shared.Abstractions.Kernel.Entities.EntityBase`1" /> class.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Kernel.Entities.EntityBase`1.Id">
            <summary>
              Gets the identifier of the entity.
            </summary>
        </member>
        <member name="F:Hyre.Shared.Abstractions.Kernel.Entities.EntityBase`1._events">
            <summary>
              The domain events that occurred in the entity.
            </summary>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Kernel.Entities.EntityBase`1.Events">
            <summary>
              Gets the domain events that occurred in the entity.
            </summary>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Kernel.Entities.EntityBase`1.RaiseEvent(Hyre.Shared.Abstractions.Kernel.Events.DomainEvent)">
            <summary>
              This method adds a domain event to the entity.
            </summary>
            <param name="domainEvent"></param>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Kernel.Entities.EntityBase`1.ClearEvents">
            <summary>
              This method clears the domain events.
            </summary>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Kernel.Entities.IEntityBase">
            <summary>
              This interface represents the base of all entities in the system.
            </summary>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Kernel.Entities.IEntityBase.Events">
            <summary>
              Gets the domain events that occurred in the entity.
            </summary>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Kernel.Entities.IEntityBase.RaiseEvent(Hyre.Shared.Abstractions.Kernel.Events.DomainEvent)">
            <summary>
              This method adds a domain event to the entity.
            </summary>
            <param name="domainEvent">The domain event to be added.</param>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Kernel.Entities.IEntityBase.ClearEvents">
            <summary>
              This method clears the domain events.
            </summary>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Kernel.Events.DomainEvent">
            <summary>
              This is the base class for all domain events.
            </summary>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Kernel.Events.DomainEvent.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Hyre.Shared.Abstractions.Kernel.Events.DomainEvent" /> class.
            </summary>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Kernel.Events.DomainEvent.OccurredAt">
            <summary>
              Gets the date and time when the event occurred.
            </summary>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Kernel.ValueObjects.StronglyTypedId`1">
            <summary>
              This is the base record for all strongly typed identifiers in the system.
            </summary>
            <param name="Value">The value of the identifier.</param>
            <typeparam name="T">The type of the identifier.</typeparam>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Kernel.ValueObjects.StronglyTypedId`1.#ctor(`0)">
            <summary>
              This is the base record for all strongly typed identifiers in the system.
            </summary>
            <param name="Value">The value of the identifier.</param>
            <typeparam name="T">The type of the identifier.</typeparam>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Kernel.ValueObjects.StronglyTypedId`1.Value">
            <summary>The value of the identifier.</summary>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Kernel.ValueObjects.ValueObject">
            <summary>
              This class is the base class for all value objects in the system.
            </summary>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Logging.ILoggerManager">
            <summary>
              This interface represents a logger manager.
            </summary>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Logging.ILoggerManager.LogInfo(System.String,System.Object[])">
            <summary>
              Log a information message.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="args">The arguments to be formatted into the message.</param>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Logging.ILoggerManager.LogWarn(System.String,System.Object[])">
            <summary>
              Log a warning message.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="args">The arguments to be formatted into the message.</param>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Logging.ILoggerManager.LogDebug(System.String,System.Object[])">
            <summary>
              Log a debug message.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="args">The arguments to be formatted into the message.</param>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Logging.ILoggerManager.LogError(System.String,System.Object[])">
            <summary>
              Log an error message.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="args">The arguments to be formatted into the message.</param>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Repositories.IRepositoryBase`1">
            <summary>
              This interface will be used to define the base methods for all repositories.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Repositories.IRepositoryBase`1.FindAll(System.Boolean)">
            <summary>
              This is used to query the database for all entities of type <typeparamref name="T" />.
            </summary>
            <param name="trackChanges">Should EF Core track changes?</param>
            <returns>Returns an IQueryable of <typeparamref name="T" /> type.</returns>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Repositories.IRepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
              This method will return a list of <typeparamref name="T" /> type, that match the given expression.
            </summary>
            <param name="expression">The expression to filter the entities.</param>
            <param name="trackChanges">Should EF Core track changes?</param>
            <returns>Returns an IQueryable of <typeparamref name="T" /> type.</returns>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Repositories.IRepositoryBase`1.Insert(`0)">
            <summary>
              This method will insert a new entity to the context.
            </summary>
            <param name="entity">The entity to be inserted.</param>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Repositories.IRepositoryBase`1.Edit(`0)">
            <summary>
              This method will update an entity in the context.
            </summary>
            <param name="entity">The entity to be updated.</param>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Repositories.IRepositoryBase`1.Remove(`0)">
            <summary>
              This method will delete an entity from the context.
            </summary>
            <param name="entity">The entity to be deleted.</param>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Repositories.IRepositoryManager">
            <summary>
              Use this interface to manage all repositories.
            </summary>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Repositories.IRepositoryManager.SaveAsync(System.Threading.CancellationToken)">
            <summary>
              This method will save all changes made in the database.
            </summary>
            <returns>Returns a task.</returns>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Requests.MetaData">
            <summary>
              This class represents the metadata of a paginated list.
            </summary>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Requests.MetaData.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Hyre.Shared.Abstractions.Requests.MetaData" /> class.
            </summary>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <param name="totalCount"></param>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Requests.MetaData.CurrentPage">
            <summary>
              Gets or sets the current page.
            </summary>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Requests.MetaData.TotalPages">
            <summary>
              Gets or sets the total number of pages.
            </summary>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Requests.MetaData.PageSize">
            <summary>
              Gets or sets the page size.
            </summary>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Requests.MetaData.TotalCount">
            <summary>
              Gets or sets the total count.
            </summary>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Requests.MetaData.HasPrevious">
            <summary>
              Gets a value indicating whether we have a previous page.
            </summary>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Requests.MetaData.HasNext">
            <summary>
              Gets a value indicating whether we have a next page.
            </summary>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Requests.PagedList`1">
            <summary>
              Represents a list with pagination data.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Requests.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Hyre.Shared.Abstractions.Requests.PagedList`1" /> class.
            </summary>
            <param name="items">The items to be paged.</param>
            <param name="count">The total number of items.</param>
            <param name="pageNumber">The current page number.</param>
            <param name="pageSize">The page size.</param>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Requests.PagedList`1.MetaData">
            <summary>
              Gets or sets the metadata values.
            </summary>
        </member>
        <member name="M:Hyre.Shared.Abstractions.Requests.PagedList`1.ToPagedList(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
              Creates a new instance of <see cref="T:Hyre.Shared.Abstractions.Requests.PagedList`1" />.
            </summary>
            <param name="source">The source.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The page size.</param>
            <returns>Returns a new instance of <see cref="T:Hyre.Shared.Abstractions.Requests.PagedList`1" />.</returns>
        </member>
        <member name="T:Hyre.Shared.Abstractions.Requests.RequestParameters">
            <summary>
              This is the base class for all request parameters.
            </summary>
        </member>
        <member name="F:Hyre.Shared.Abstractions.Requests.RequestParameters.MaxPageSize">
            <summary>
              The maximum of items per page.
            </summary>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Requests.RequestParameters.PageNumber">
            <summary>
              Gets or sets the page number.
            </summary>
        </member>
        <member name="P:Hyre.Shared.Abstractions.Requests.RequestParameters.PageSize">
            <summary>
              Gets or sets the page size.
            </summary>
        </member>
    </members>
</doc>
