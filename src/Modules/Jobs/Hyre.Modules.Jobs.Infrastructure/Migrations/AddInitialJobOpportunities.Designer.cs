// <auto-generated />
using System;
using Hyre.Modules.Jobs.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hyre.Modules.Jobs.Infrastructure.Migrations
{
    [DbContext(typeof(JobsRepositoryContext))]
    [Migration("20240307234146_AddInitialJobOpportunities")]
    partial class AddInitialJobOpportunities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("jobs")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hyre.Modules.Jobs.Core.Entities.JobOpportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_job_opportunities");

                    b.ToTable("job_opportunities", "jobs");
                });

            modelBuilder.Entity("Hyre.Modules.Jobs.Core.Entities.JobOpportunity", b =>
                {
                    b.OwnsOne("Hyre.Modules.Jobs.Core.ValueObjects.JobOpportunities.JobOpportunityContract", "Contract", b1 =>
                        {
                            b1.Property<Guid>("JobOpportunityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("MaxSalary")
                                .HasColumnType("numeric")
                                .HasColumnName("contract_max_salary");

                            b1.Property<decimal>("MinSalary")
                                .HasColumnType("numeric")
                                .HasColumnName("contract_min_salary");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("contract_type");

                            b1.HasKey("JobOpportunityId");

                            b1.ToTable("job_opportunities", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobOpportunityId")
                                .HasConstraintName("fk_job_opportunities_job_opportunities_id");
                        });

                    b.OwnsOne("Hyre.Modules.Jobs.Core.ValueObjects.JobOpportunities.JobOpportunityLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("JobOpportunityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("location_city");

                            b1.Property<string>("State")
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("location_state");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_type");

                            b1.HasKey("JobOpportunityId");

                            b1.ToTable("job_opportunities", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobOpportunityId")
                                .HasConstraintName("fk_job_opportunities_job_opportunities_id");
                        });

                    b.OwnsOne("Hyre.Modules.Jobs.Core.ValueObjects.JobOpportunities.JobOpportunityRequirements", "Requirements", b1 =>
                        {
                            b1.Property<Guid>("JobOpportunityId")
                                .HasColumnType("uuid");

                            b1.Property<string[]>("Values")
                                .IsRequired()
                                .HasColumnType("text[]")
                                .HasAnnotation("Relational:JsonPropertyName", "values");

                            b1.HasKey("JobOpportunityId");

                            b1.ToTable("job_opportunities", "jobs");

                            b1.ToJson("requirements");

                            b1.WithOwner()
                                .HasForeignKey("JobOpportunityId")
                                .HasConstraintName("fk_job_opportunities_job_opportunities_id");
                        });

                    b.Navigation("Contract")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Requirements");
                });
#pragma warning restore 612, 618
        }
    }
}
